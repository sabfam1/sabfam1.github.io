<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0"/>
<title>Grade Engine â€” Final HTML</title>
<style>
  :root{
    --bg:#000;
    --card:#0f1113;
    --panel:#151619;
    --muted:#94a3b8;
    --text:#ffffff;
    --blue:#0a84ff;
    --danger:#ff3b30;
    --input:#1e2023;
    --border:rgba(255,255,255,0.06);
    --radius:14px;
  }

  html,body{height:100%;margin:0;background:var(--bg);font-family:-apple-system,BlinkMacSystemFont,"SF Pro Text",Segoe UI,Roboto,Arial;color:var(--text);-webkit-font-smoothing:antialiased}
  body{display:flex;justify-content:center;padding:18px;box-sizing:border-box}

  .card{
    width:100%; max-width:432px;  /* fitted for iPhone 15 Pro Max */
    background:linear-gradient(180deg,var(--card),#0b0d0f);
    border-radius:18px;
    padding:18px;
    box-sizing:border-box;
    box-shadow:0 12px 30px rgba(0,0,0,0.6);
  }

  h1{margin:0;text-align:center;color:var(--blue);font-size:22px;font-weight:700}
  .spacer{height:14px}

  label{display:block;font-size:13px;color:var(--muted);margin-bottom:6px}
  input[type="text"], input[type="number"], select, button {
    font-family:inherit;
    font-size:15px;
    color:var(--text);
  }

  .field { margin-top:10px }
  .field input[type="text"]{
    width:100%;
    padding:10px 12px;
    border-radius:12px;
    border:1px solid var(--border);
    background:var(--input);
    box-sizing:border-box;
    -webkit-appearance:none;
  }

  .weights{
    display:grid;
    grid-template-columns:1fr 1fr;
    gap:10px;
    margin-top:12px;
  }
  .weights .col input[type="number"]{
    width:100%;
    padding:10px 12px;
    border-radius:12px;
    border:1px solid var(--border);
    background:var(--input);
    box-sizing:border-box;
  }

  /* Header row - visual only; columns widths must match rows */
  .header-row{
    display:grid;
    grid-template-columns: 50% 20% 14% 11% 5%;
    gap:6px;
    margin-top:14px;
    align-items:center;
  }
  .th{
    background:var(--blue);
    padding:8px 6px;
    border-radius:10px;
    text-align:center;
    font-size:13px;
    color:#fff;
  }

  /* rows container - vertical scroll only (no horizontal) */
  .rows{
    margin-top:10px;
    max-height:380px;
    overflow:auto;
    padding-right:6px;
  }

  /* Each row uses same grid (no horizontal scroll). Assignment input is smaller (Option 2: small) */
  .row{
    display:grid;
    grid-template-columns: 42% 20% 14% 14% 10%;
    gap:6px;
    background:var(--panel);
    border-radius:12px;
    padding:8px;
    align-items:center;
    margin-bottom:8px;
    box-sizing:border-box;
  }

  /* assignment input: smaller, will truncate long names visually (no horizontal scrolling) */
  .assign{
    width:100%;
    padding:8px 10px;
    border-radius:10px;
    border:1px solid var(--border);
    background:transparent;
    color:var(--text);
    overflow:hidden;
    text-overflow:ellipsis;
    white-space:nowrap;
    box-sizing:border-box;
  }

  select.cat{
    padding:8px;
    border-radius:10px;
    border:1px solid var(--border);
    background:transparent;
    color:var(--text);
    box-sizing:border-box;
    width:100%;
  }

  input.score, input.pts{
    padding:8px;
    border-radius:10px;
    border:1px solid var(--border);
    background:transparent;
    color:var(--text);
    text-align:center;
    box-sizing:border-box;
    max-width:100%;
  }

  input.pts{ max-width:110px } /* ensures 3 digits fit */

  .remove-wrap{ display:flex; align-items:center; justify-content:center; }
  button.remove{
    width:40px; height:36px; border-radius:10px; border:none; background:var(--danger); color:#fff; font-size:18px; cursor:pointer;
  }

  .primary{
    width:100%;
    padding:14px;
    margin-top:12px;
    border-radius:14px;
    border:none;
    font-weight:700;
    background:var(--blue);
    color:#fff;
    font-size:16px;
    cursor:pointer;
  }

  .seg{ display:flex; gap:10px; margin-top:12px; }
  .seg button{ flex:1; padding:11px; border-radius:12px; border:1px solid var(--border); background:var(--input); color:var(--text); font-weight:600; cursor:pointer; }

  .result{ margin-top:12px; color:var(--muted); font-size:14px }

  @media (max-width:380px){
    .row, .header-row { grid-template-columns:46% 20% 12% 12% 10%; }
  }
</style>
</head>
<body>
  <div class="card" role="main" aria-label="Grade Engine">
    <h1>ðŸ“˜ Grade Engine</h1>
    <div class="spacer"></div>

    <div class="field">
      <label for="className">Class name</label>
      <input id="className" type="text" placeholder="e.g. Science">
    </div>

    <div class="weights" aria-label="Weights">
      <div class="col">
        <label for="testW">Tests %</label>
        <input id="testW" type="number" min="0" max="100" value="60">
      </div>
      <div class="col">
        <label for="quizW">Quizzes %</label>
        <input id="quizW" type="number" min="0" max="100" value="20">
      </div>
      <div class="col">
        <label for="cwW">Classwork %</label>
        <input id="cwW" type="number" min="0" max="100" value="10">
      </div>
      <div class="col">
        <label for="hwW">Homework %</label>
        <input id="hwW" type="number" min="0" max="100" value="10">
      </div>
    </div>

    <div class="header-row" aria-hidden="true">
      <div class="th">Assignment</div>
      <div class="th">Category</div>
      <div class="th">Score</div>
      <div class="th">Pts</div>
      <div class="th"></div>
    </div>

    <div class="rows" id="rows" aria-live="polite"></div>

    <button id="addBtn" class="primary" aria-label="Add assignment">ï¼‹ Add Assignment</button>
    <button id="calcBtn" class="primary" aria-label="Calculate grade">ðŸ§® Calculate Grade</button>

    <div class="seg" role="toolbar" aria-label="Data tools">
      <button id="exportBtn">Export</button>
      <button id="importBtn">Import (Files)</button>
      <button id="clearBtn" style="border-color:var(--danger); color:var(--danger);">Clear</button>
    </div>

    <div id="result" class="result" aria-live="polite"></div>

    <!-- native file input used to open Files.app on iOS / Android -->
    <input id="filePicker" type="file" accept=".json,application/json" style="display:none" />
  </div>

<script>
/* Full single-file JS:
   - assignment input reduced in width (Option 2)
   - uses same grid columns for header and rows
   - no horizontal scroll (row elements don't expand)
   - import via real file picker (Files app)
   - export creates downloadable json
   - delete button centered and not cut off
   - simple normalize import to accept various json shapes
*/

const rowsEl = document.getElementById('rows');
const filePicker = document.getElementById('filePicker');
const resultEl = document.getElementById('result');

let assignments = [];

/* small haptic helper */
function vib(ms=20){ if(navigator.vibrate) navigator.vibrate(ms); }

/* render the rows using same grid template as header */
function render(){
  rowsEl.innerHTML = '';
  assignments.forEach((a, i)=>{
    const div = document.createElement('div');
    div.className = 'row';
    div.innerHTML = `
      <input class="assign" data-i="${i}" data-field="name" value="${escapeHtml(a.name)}" />
      <select class="cat" data-i="${i}" data-field="category">
        <option ${a.category==='Test'?'selected':''}>Test</option>
        <option ${a.category==='Quiz'?'selected':''}>Quiz</option>
        <option ${a.category==='Classwork'?'selected':''}>Classwork</option>
        <option ${a.category==='Homework'?'selected':''}>Homework</option>
      </select>
      <input class="score" data-i="${i}" data-field="score" type="number" min="0" inputmode="numeric" value="${a.score===undefined?'':a.score}" />
      <input class="pts" data-i="${i}" data-field="pts" type="number" min="0" max="999" inputmode="numeric" value="${a.pts===undefined?'':a.pts}" />
      <div class="remove-wrap"><button class="remove" data-i="${i}" aria-label="Remove">âœ•</button></div>
    `;
    rowsEl.appendChild(div);
  });
  attachListeners();
}

/* escape helper */
function escapeHtml(s){ return String(s||'').replace(/&/g,'&amp;').replace(/"/g,'&quot;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }

/* attach input & remove listeners */
function attachListeners(){
  rowsEl.querySelectorAll('input[data-i], select[data-i]').forEach(el=>{
    el.oninput = (e)=>{
      const i = Number(el.dataset.i);
      const f = el.dataset.field;
      if(!Number.isFinite(i) || i<0 || i>=assignments.length) return;
      const val = (f==='score' || f==='pts') ? (el.value === '' ? '' : Number(el.value)) : el.value;
      assignments[i][f] = val;
    };
  });
  rowsEl.querySelectorAll('button.remove').forEach(btn=>{
    btn.onclick = ()=>{
      const i = Number(btn.dataset.i);
      if(!confirm('Remove this assignment?')) return;
      assignments.splice(i,1);
      render();
      vib(18);
    };
  });
}

/* add initial demo rows */
assignments.push({name:'Sample Test', category:'Test', score:92, pts:100});
assignments.push({name:'Signed Quiz', category:'Quiz', score:20, pts:20});
render();

/* add assignment */
document.getElementById('addBtn').addEventListener('click', ()=>{
  assignments.push({name:'', category:'Classwork', score:'', pts:''});
  render();
  setTimeout(()=> rowsEl.scrollTop = rowsEl.scrollHeight, 120);
  vib(14);
});

/* calculate grade (PowerSchool-like): category averages, apply active weights */
document.getElementById('calcBtn').addEventListener('click', ()=>{
  const weights = {
    Test: (Number(document.getElementById('testW').value)||0)/100,
    Quiz: (Number(document.getElementById('quizW').value)||0)/100,
    Classwork: (Number(document.getElementById('cwW').value)||0)/100,
    Homework: (Number(document.getElementById('hwW').value)||0)/100
  };
  const totals = { Test:{e:0,p:0}, Quiz:{e:0,p:0}, Classwork:{e:0,p:0}, Homework:{e:0,p:0} };
  assignments.forEach(a=>{
    const c = a.category || 'Classwork';
    const e = Number(a.score)||0;
    const p = Number(a.pts)||0;
    totals[c].e += e;
    totals[c].p += p;
  });
  let weighted=0,active=0;
  const parts = [];
  ['Test','Quiz','Classwork','Homework'].forEach(cat=>{
    const t = totals[cat];
    const avg = t.p>0 ? (t.e/t.p)*100 : 0;
    if(t.p>0){ weighted += avg * (weights[cat]||0); active += (weights[cat]||0); }
    parts.push(`${cat}: ${avg.toFixed(2)}% (${t.e}/${t.p})`);
  });
  const final = active>0 ? (weighted/active) : 0;
  resultEl.innerHTML = parts.join('<br>') + `<hr><strong>Final: ${final.toFixed(2)}%</strong>`;
  vib(12);
});

/* export class JSON (download) */
document.getElementById('exportBtn').addEventListener('click', ()=>{
  const payload = {
    name: document.getElementById('className').value || '',
    weights: {
      Test: Number(document.getElementById('testW').value)||0,
      Quiz: Number(document.getElementById('quizW').value)||0,
      Classwork: Number(document.getElementById('cwW').value)||0,
      Homework: Number(document.getElementById('hwW').value)||0
    },
    assignments
  };
  const blob = new Blob([JSON.stringify(payload, null, 2)], {type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = (payload.name || 'class') + '.json';
  a.click();
  URL.revokeObjectURL(url);
  vib(10);
});

/* open native file picker (Files app) */
document.getElementById('importBtn').addEventListener('click', ()=> filePicker.click());

filePicker.addEventListener('change', (ev)=>{
  const f = ev.target.files[0];
  if(!f) return;
  const reader = new FileReader();
  reader.onload = e=>{
    try{
      const data = JSON.parse(e.target.result);
      // Accept several shapes:
      if(Array.isArray(data)){
        assignments = data.map(normalize);
      } else {
        assignments = Array.isArray(data.assignments) ? data.assignments.map(normalize) : [];
        if(data.name) document.getElementById('className').value = data.name;
        if(data.weights){
          document.getElementById('testW').value = data.weights.Test || document.getElementById('testW').value;
          document.getElementById('quizW').value = data.weights.Quiz || document.getElementById('quizW').value;
          document.getElementById('cwW').value = data.weights.Classwork || document.getElementById('cwW').value;
          document.getElementById('hwW').value = data.weights.Homework || document.getElementById('hwW').value;
        } else {
          if(data.test !== undefined) document.getElementById('testW').value = data.test;
          if(data.quiz !== undefined) document.getElementById('quizW').value = data.quiz;
          if(data.cw !== undefined) document.getElementById('cwW').value = data.cw;
          if(data.hw !== undefined) document.getElementById('hwW').value = data.hw;
        }
      }
      render();
      resultEl.innerHTML = `Imported ${assignments.length} assignments`;
      vib(18);
    }catch(err){
      alert('Import failed: invalid JSON');
      console.error(err);
    } finally { filePicker.value = ''; }
  };
  reader.readAsText(f);
});

/* normalize many possible assignment keys to our internal shape */
function normalize(item){
  if(!item) return {name:'',category:'Classwork',score:'',pts:''};
  const name = item.name ?? item.assignment ?? item.title ?? '';
  const category = item.category ?? item.type ?? item.cat ?? 'Classwork';
  const score = item.score ?? item.earned ?? item.e ?? '';
  const pts = item.pts ?? item.points ?? item.total ?? item.possible ?? '';
  return { name:String(name), category:String(category), score: (score === '' ? '' : Number(score)), pts: (pts === '' ? '' : Number(pts)) };
}

/* clear all with confirm */
document.getElementById('clearBtn').addEventListener('click', ()=>{
  if(!confirm('Clear class name, weights, and all assignments?')) return;
  assignments = [];
  document.getElementById('className').value = '';
  document.getElementById('testW').value = '';
  document.getElementById('quizW').value = '';
  document.getElementById('cwW').value = '';
  document.getElementById('hwW').value = '';
  render();
  resultEl.innerHTML = 'Cleared';
  vib(12);
});
</script>
</body>
</html>